import React, { useRef, useEffect, useState } from 'react';
import { Grid, html } from 'gridjs';
import { GridData } from '../../utils/data';
import "./vulnerability-report.scss";

function DataGrid({ reportUrl }) {
    const tableRef = useRef(null);
    const gridRef = useRef(null);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        // Destroi grid existente se houver
        if (gridRef.current) {
            gridRef.current.destroy();
            gridRef.current = null;
        }

        // Limpa o container antes de renderizar
        if (tableRef.current) {
            tableRef.current.innerHTML = '';
        }

        setIsLoading(true);

        // Cria novo grid
        gridRef.current = new Grid({
            columns: [
                "Resource",
                "Score",
                {
                    name: "Severity",
                    formatter: (_, row) => formatSeverity(row),
                    sort: {
                        compare: (a, b) => {
                            const order = ["", "unknown", "low", "medium", "high", "critical"];
                            const indexA = order.indexOf(a.toString().toLowerCase());
                            const indexB = order.indexOf(b.toString().toLowerCase());
                            if (indexA < indexB) return -1;
                            if (indexA > indexB) return 1;
                            return 0;
                        }
                    }
                },
                "Fixed Version",
                "Installed Version",
                {
                    name: "CVE Record",
                    formatter: (_, row) => formatCVERecord(row)
                },
                {
                    name: "Vuln Age",
                    formatter: (_, row) => formatVulnAge(row)
                }
            ],
            sort: true,
            search: true,
            pagination: {
                limit: 25,
                summary: false
            },
            data: async () => {
                try {
                    const data = await GridData(reportUrl);
                    setIsLoading(false);
                    return data;
                } catch (error) {
                    setIsLoading(false);
                    console.error('Error loading grid data:', error);
                    return [];
                }
            }
        }).render(tableRef.current);
    }, [reportUrl]);

    useEffect(() => () => {
        gridRef.current?.destroy();
    }, []);

    return (
        <div className="vulnerability-report__wrapper">
            {isLoading && (
                <div style={{ padding: '20px', textAlign: 'center', color: '#666' }}>
                    Carregando dados de vulnerabilidades...
                </div>
            )}
            <div ref={tableRef} />
        </div>
    );
}

function formatSeverity(row) {
    const severity = row.cells[2]?.data;
    if (severity != null) {
        return html(`<span class='vulnerability-report vulnerability-report__sev_${severity.toLowerCase()}'>${severity}</span>`);
    }
}

function formatCVERecord(row) {
    const cveUrl = row.cells[5]?.data;
    if (cveUrl != null) {
        const cveId = cveUrl.split('/').pop().toUpperCase();
        return html(`<a href='${cveUrl}' target='_blank' rel='noopener noreferrer'>${cveId}</a>`);
    }
}

function formatVulnAge(row) {
    const dateStr = row.cells[6]?.data;
    if (dateStr !== "") {
        const ageInDays = (Date.now() - new Date(dateStr)) / (1000 * 3600 * 24);
        return ageInDays <= 365 ? html(`<span>${Math.round(ageInDays)} days</span>`) : html(`<span>${Math.round(ageInDays / 30.44)} months</span>`);
    }
}

export default DataGrid;
