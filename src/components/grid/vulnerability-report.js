import React, { useRef, useEffect } from 'react';
import { Grid, html } from 'gridjs';
import { GridData } from '../../utils/data';
import "./vulnerability-report.scss";

const order = ["", "unknown", "low", "medium", "high", "critical"];
const MILLISECONDS_IN_DAY = 1000 * 3600 * 24;
const AVERAGE_DAYS_IN_MONTH = 30.44;

function DataGrid({ reportUrl }) {
    const [grid, setGrid] = useState(null);

    useEffect(() => {
        if (!grid) {
            const newGrid = new Grid({
                columns: [
                    "Resource",
                    "Score",
                    {
                        name: "Severity",
                        formatter: (_, row) => formatSeverity(row),
                        sort: {
                            compare: (a, b) => {
                                const indexA = order.indexOf(a.toString().toLowerCase());
                                const indexB = order.indexOf(b.toString().toLowerCase());
                                if (indexA < indexB) return -1;
                                if (indexA > indexB) return 1;
                                return 0;
                            }
                        }
                    },
                    "Fixed Version",
                    "Installed Version",
                    {
                        name: "CVE Record",
                        formatter: (_, row) => formatCVERecord(row)
                    },
                    {
                        name: "Vuln Age",
                        formatter: (_, row) => formatVulnAge(row)
                    }
                ],
                sort: true,
                search: true,
                pagination: {
                    limit: 25,
                    summary: false
                },
                data: () => GridData(reportUrl)
            }).render();
            setGrid(newGrid);
        }
    }, [reportUrl]);

    useEffect(() => () => {
        grid?.destroy();
    }, [grid]);

    return <div className="vulnerability-report__wrapper" />;
}

function formatSeverity(row) {
    const severity = row.cells[2]?.data;
    if (severity != null && severity !== undefined) {
        return <span className={`vulnerability-report vulnerability-report__sev_${severity.toLowerCase()}`}>{severity}</span>;
    }
}

function formatCVERecord(row) {
    const cveUrl = row.cells[5]?.data;
    if (cveUrl != null && cveUrl !== undefined) {
        const cveId = cveUrl.split('/').pop().toUpperCase();
        return <a href={cveUrl} target='_blank' rel='noopener noreferrer'>{cveId}</a>;
    }
}

function formatVulnAge(row) {
    const dateStr = row.cells[6]?.data;
    if (dateStr !== "") {
        const ageInDays = (Date.now() - new Date(dateStr)) / MILLISECONDS_IN_DAY;
        return ageInDays <= 365 ? <span>{Math.round(ageInDays)} days</span> : <span>{Math.round(ageInDays / AVERAGE_DAYS_IN_MONTH)} months</span>;
    }
}

export default DataGrid;
